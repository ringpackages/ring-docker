name: Ring Docker CI

on:
  push:
    branches: [ "master" ]
    paths-ignore:
    - '**.md'
  release:
    types: [ published ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_nightly:
        description: 'Force nightly build regardless of schedule'
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRIES: |
    quay.io/ydrag0n/ring
    ghcr.io/ysdragon/ring
    ${{ secrets.DOCKER_HUB_USERNAME }}/ring

jobs:
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      is_nightly: ${{ steps.matrix.outputs.is_nightly }}
    steps:
    - name: Setup build matrix
      id: matrix
      run: |
        IS_NIGHTLY="false"
        if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event.inputs.force_nightly }}" == "true" ]]; then
          IS_NIGHTLY="true"
        fi
        
        echo "is_nightly=$IS_NIGHTLY" >> $GITHUB_OUTPUT
        
        if [[ "$IS_NIGHTLY" == "true" ]]; then
          # Nightly builds - all variants
          MATRIX='{"include":[{"variant":"full","dockerfile":"Dockerfile.nightly","platforms":"linux/amd64,linux/arm64","use_matrix_build":true,"tags_suffix":"nightly,nightly-full"},{"variant":"light","dockerfile":"Dockerfile.nightly.light","platforms":"linux/amd64,linux/arm64,linux/riscv64","use_matrix_build":false,"tags_suffix":"nightly-light"}]}'
        else
          # Release builds - all variants
          MATRIX='{"include":[{"variant":"full","dockerfile":"Dockerfile","platforms":"linux/amd64,linux/arm64","use_matrix_build":true,"tags_suffix":"latest,full"},{"variant":"light","dockerfile":"Dockerfile.light","platforms":"linux/amd64,linux/arm64,linux/riscv64","use_matrix_build":false,"tags_suffix":"light"}]}'
        fi
        
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.variant }} (${{ matrix.use_matrix_build && 'Multi-arch' || 'Single' }})
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      if: matrix.use_matrix_build == false
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Quay.io
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_ROBOT_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRIES }}
        tags: |
          type=raw,value=${{ matrix.tags_suffix }},enable={{is_default_branch}}

    - name: Build and push (Single build)
      if: matrix.use_matrix_build == false
      id: build-single
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: ${{ matrix.platforms }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
  build-matrix:
    name: Build Matrix ${{ matrix.variant }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    needs: [setup]
    if: needs.setup.outputs.is_nightly == 'true' || github.event_name == 'push' || github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        include:
        - variant: full
          arch: amd64
        - variant: full
          arch: arm64
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Determine dockerfile
      id: dockerfile
      run: |
        if [[ "${{ needs.setup.outputs.is_nightly }}" == "true" ]]; then
          echo "dockerfile=Dockerfile.nightly" >> $GITHUB_OUTPUT
        else
          echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to registries
      if: github.event_name != 'pull_request'
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin  
        echo "${{ secrets.QUAY_ROBOT_TOKEN }}" | docker login quay.io -u "${{ secrets.QUAY_USERNAME }}" --password-stdin

    - name: Build and push arch-specific image
      id: build-and-push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ steps.dockerfile.outputs.dockerfile }}
        platforms: linux/${{ matrix.arch }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          quay.io/ydrag0n/ring:${{ github.sha }}-${{ matrix.arch }}
          ghcr.io/ysdragon/ring:${{ github.sha }}-${{ matrix.arch }}
          ${{ secrets.DOCKER_HUB_USERNAME }}/ring:${{ github.sha }}-${{ matrix.arch }}
        provenance: false

  manifest:
    name: Create Multi-arch Manifests
    runs-on: ubuntu-latest
    needs: [setup, build-matrix]
    if: always() && needs.build-matrix.result == 'success' && github.event_name != 'pull_request'
    steps:
    - name: Login to registries
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin  
        echo "${{ secrets.QUAY_ROBOT_TOKEN }}" | docker login quay.io -u "${{ secrets.QUAY_USERNAME }}" --password-stdin

    - name: Extract final tags
      id: final-tags
      run: |
        IS_NIGHTLY="${{ needs.setup.outputs.is_nightly }}"

        if [[ "$IS_NIGHTLY" == "true" ]]; then
          TAGS="nightly,nightly-full"
        else
          TAGS="latest,full"
        fi
        
        echo "tags=$TAGS" >> $GITHUB_OUTPUT

    - name: Create and push manifests
      run: |
        TAGS="${{ steps.final-tags.outputs.tags }}"
        
        for tag in ${TAGS//,/ }; do
          echo "Creating manifest for tag: $tag"
          
          for registry_image in "quay.io/ydrag0n/ring" "ghcr.io/ysdragon/ring" "${{ secrets.DOCKER_HUB_USERNAME }}/ring"; do
            docker manifest create "$registry_image:$tag" \
              "$registry_image:${{ github.sha }}-amd64" \
              "$registry_image:${{ github.sha }}-arm64"
            docker manifest push "$registry_image:$tag"
          done
        done

  cleanup:
    name: Cleanup Intermediate Images
    runs-on: ubuntu-latest
    needs: [setup, build, build-matrix, manifest]
    if: always() && needs.build-matrix.result == 'success' && github.event_name != 'pull_request'
    steps:
    - name: Install Crane
      uses: iarekylew00t/crane-installer@v3

    - name: Login to registries
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin  
        echo "${{ secrets.QUAY_ROBOT_TOKEN }}" | docker login quay.io -u "${{ secrets.QUAY_USERNAME }}" --password-stdin

    - name: Delete intermediate SHA-tagged images
      run: |
        echo "Cleaning up intermediate images with SHA: ${{ github.sha }}"
        
        REGISTRIES=(
          "quay.io/ydrag0n/ring"
          "ghcr.io/ysdragon/ring"
          "${{ secrets.DOCKER_HUB_USERNAME }}/ring"
        )
        
        ARCHITECTURES=("amd64" "arm64")
        CLEANUP_ERRORS=0
        
        for arch in "${ARCHITECTURES[@]}"; do
          for registry in "${REGISTRIES[@]}"; do
            image_tag="$registry:${{ github.sha }}-$arch"
            echo "Attempting to delete: $image_tag"
            
            if crane delete "$image_tag" 2>/dev/null; then
              echo "✓ Successfully deleted: $image_tag"
            else
              echo "⚠ Failed to delete or not found: $image_tag"
              CLEANUP_ERRORS=$((CLEANUP_ERRORS + 1))
            fi
          done
        done
        
        echo "Cleanup completed with $CLEANUP_ERRORS errors."
        if [ $CLEANUP_ERRORS -gt 0 ]; then
          echo "Some intermediate images could not be cleaned up, but this is not critical."
        fi
